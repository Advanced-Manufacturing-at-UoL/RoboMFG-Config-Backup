[gcode_macro TOOL_PICKUP]
description: Pickup tool
gcode:

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    KTCC_T{params.T}
  {% else %}
    {action_respond_info("Must enter tool number")}
  {% endif %}


[gcode_macro TOOL_DROPOFF]
description: Dropoff current tool
gcode:
  KTCC_TOOL_DROPOFF_ALL


[gcode_macro COUPLER_UNLOCK]
description: Unlock toolhead
gcode:
  TOOL_UNLOCK

[gcode_macro COUPLER_LOCK]
description: Lock toolhead
gcode:
  TOOL_LOCK

[gcode_macro TOOL_SERVICE]
description: Bring selected tool to the front and lower the bed for servicing
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set service_x = printer.configfile.config.stepper_x.position_max|float / 2 %}
  {% set service_y = 10 %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set service_z_speed = printer.configfile.config.printer.max_z_velocity|float * 60 %}
  {% set chosen_tool = params.T|int %}

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    {% set current_tool = printer.toollock.tool_current|int %}
    {% if current_tool != chosen_tool %}
      KTCC_T{params.T}
    {% endif %}
    {% set myself = printer['tool '~params.T] %}
    {% set service_z = printer.toolhead.axis_maximum.z - myself.offset[2]|int %}
    M400
    G90
    G1 X{service_x} Y{service_y} F{speed}
    G1 Z{service_z} F{service_z_speed}
  {% else %}
    {action_respond_info("Tool must be defined")}
  {% endif %}


[gcode_macro TOOL_SERVICE_END]
description: Drop off tool and return print bed to a raised height
gcode:
  {% set current_tool = printer.toollock.tool_current|int %}
  {% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
  {% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
  {% set service_z_speed = printer.configfile.config.printer.max_z_velocity|float * 60 %}

  {% if x_homed is false or y_homed is false or z_homed is false %}
    G28
  {% endif %}
  {% if current_tool >= 0 %}
    KTCC_TOOL_DROPOFF_ALL
  {% endif %}
  M400
  G90
  G1 Z{z_hop} F{service_z_speed}
  G1 X{safe_home_x} Y{safe_home_y} F{speed}


[delayed_gcode AUTO_ACCESSORY_POWER]
initial_duration: 1
gcode:
  {% if printer.webhooks.state == 'ready' %}
    {action_call_remote_method("set_device_power",
                                device="bed",
                                state="on")}
    {action_call_remote_method("set_device_power",
                                device="ABMotors",
                                state="on")}
  {% endif %}
  {% if printer.webhooks.state == 'shutdown' %}
    {action_call_remote_method("set_device_power",
                                device="bed",
                                state="off")}
    {action_call_remote_method("set_device_power",
                                device="ABMotors",
                                state="off")}
  {% endif %}

[gcode_shell_command backup_cfg]
command: /usr/bin/bash /home/pi/printer_data/config/additions/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned.
gcode:
  MAYBE_HOME
  TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
  RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
  RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        # {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set x_max = 345 %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        # {% set y_max = printer.toolhead.axis_maximum.y - bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound -50 %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 Z50
        G4 P10000 
        G1 X{x_max} Y{y_max} F{30*60}
        G28 X Y
        G0 X{x_max} Y{y_max} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28 X Y
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{x_max} Y{y_max} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

