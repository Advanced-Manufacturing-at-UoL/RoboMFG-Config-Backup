#############################################################################################################
### Macros
### Add any macros relating to general machine opperations here
#############################################################################################################
[delayed_gcode AUTO_ACCESSORY_POWER]
initial_duration: 1
gcode:
  {% if printer.webhooks.state == 'ready' %}
    {action_call_remote_method("set_device_power",
                                device="bed",
                                state="on")}
    {action_call_remote_method("set_device_power",
                                device="ABMotors",
                                state="on")}
  {% endif %}
  {% if printer.webhooks.state == 'shutdown' %}
    {action_call_remote_method("set_device_power",
                                device="bed",
                                state="off")}
    {action_call_remote_method("set_device_power",
                                device="ABMotors",
                                state="off")}
  {% endif %}

[gcode_shell_command backup_cfg]
command: /usr/bin/bash /home/pi/printer_data/config/additions/autocommit.sh
timeout: 30
verbose: True


[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg


[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned.
gcode:
  MAYBE_HOME
  TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
  RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
  RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        # {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set x_max = 345 %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        # {% set y_max = printer.toolhead.axis_maximum.y - bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound -50 %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 Z50
        G4 P10000 
        G1 X{x_max} Y{y_max} F{30*60}
        G28 X Y
        G0 X{x_max} Y{y_max} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28 X Y
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{x_max} Y{y_max} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  {% if params.EXTRUDER is defined %}
    TOOL_SERVICE T={params.EXTRUDER}
	SAVE_GCODE_STATE NAME=unload_state
	G91
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
      M117 Heating...
      # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
      M109 T{params.EXTRUDER} S{params.TEMP|default(220, true)}
	{% endif %}
	{% set unload_speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
	{% set unload_length = printer["gcode_macro RatOS"].filament_unload_length|float %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-{unload_length} F{unload_speed}
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
	RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  {% if params.EXTRUDER is defined %}
    TOOL_SERVICE T={params.EXTRUDER}
    SAVE_GCODE_STATE NAME=load_state
	G91
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
      M117 Heating...
      M104 S{params.TEMP|default(220, true)}
      M109 T{params.EXTRUDER} S{params.TEMP|default(220, true)}
	{% endif %}
	{% set load_speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
	{% set load_length = printer["gcode_macro RatOS"].filament_load_length|float %}
	M117 Loading filament...
	# Load the filament into the hotend area.
	G0 E{load_length} F{load_speed}
	# Wait a secod
	G4 P1000
	# Purge
	G0 E40 F100
	# Wait for purge to complete
	M400
	M117 Filament loaded!
	RESPOND MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=load_state
  {% endif %}


[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genarates input shaper resonances graphs for analysis. Uses the AXIS parameter for if you only want to do one axis at a time, (eg. GENERATE_SHAPER_GRAPHS AXIS=X)
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set T = params.T|default(0) %}
  {% set freq_start = params.FREQUENCY_START|default(10)|int %}
  {% set freq_end = params.FREQUENCY_END|default(133)|int %}

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    KTCC_T{T}
    {% if params.AXIS is defined %}
      {% if params.AXIS|lower == 'x' %}
        TEST_RESONANCES AXIS=X FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
        RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
      {% elif params.AXIS|lower == 'y' %}
        TEST_RESONANCES AXIS=Y FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
        RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
      {% else %}
        {action_raise_error("Unknown axis specified. Expected X or Y.")}
      {% endif %}
    {% else %}
      TEST_RESONANCES AXIS=X FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      TEST_RESONANCES AXIS=Y FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
      RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
      RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
    {% endif %}
  {% endif %}


[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned.
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set T = params.T|default(0) %}
  {% set freq_start = params.FREQUENCY_START|default(10)|int %}
  {% set freq_end = params.FREQUENCY_END|default(133)|int %}

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    KTCC_T{T}
    {% if params.AXIS is defined %}
      {% if params.AXIS|lower == 'x' %}
        TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
        TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START=10 FREQ_END=11 CHIPS=t{T}
      {% elif params.AXIS|lower == 'y' %}
        TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START=10 FREQ_END=11 CHIPS=t{T}
        TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      {% else %}
        {action_raise_error("Unknown axis specified. Expected X or Y.")}
      {% endif %}
    {% else %}
      TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
    {% endif %}
    RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
    RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"
  {% endif %}

