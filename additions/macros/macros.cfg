#############################################################################################################
### Macros
### Add any macros relating to general machine opperations here
#############################################################################################################
[delayed_gcode AUTO_ACCESSORY_POWER]
initial_duration: 1
gcode:
  {% if printer.webhooks.state == 'ready' %}
    {action_call_remote_method("set_device_power",
                                device="bed",
                                state="on")}
    {action_call_remote_method("set_device_power",
                                device="ABMotors",
                                state="on")}
  {% endif %}
  {% if printer.webhooks.state == 'shutdown' %}
    {action_call_remote_method("set_device_power",
                                device="bed",
                                state="off")}
    {action_call_remote_method("set_device_power",
                                device="ABMotors",
                                state="off")}
  {% endif %}

[gcode_shell_command backup_cfg]
command: /usr/bin/bash /home/pi/printer_data/config/additions/autocommit.sh
timeout: 30
verbose: True


[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}

  {% if x_homed is false or y_homed is false or z_homed is false %}
    G28
  {% endif %}

  # Speed
  {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
  # Iterations
  {% set iterations = params.ITERATIONS|default(5)|int %}
  # Acceleration
  {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
  # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
  {% set bound = params.BOUND|default(20)|int %}
  # Size for small pattern box
  {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}

  {% if params.T is defined %}
    KTCC_T{params.T}
    {% set myself = printer['tool '~params.T]%}
    {% set x_max = 300 + bound %}
    SET_GCODE_OFFSET X=0 Y=0
  {% else %}
    TOOL_DROPOFF
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
  {% endif %}
  
  # Large pattern
  # Max positions, inset by BOUND
  
  {% set x_min = printer.toolhead.axis_minimum.x + bound %}
  {% set y_min = printer.toolhead.axis_minimum.y + bound %}
  {% set y_max = printer["gcode_macro Tool_Changer"].safe_zone_y - bound %}
  
  # Small pattern at center
  # Find X/Y center point
  {% set x_center = (x_min|float + x_max|float ) / 2 %}
  {% set y_center = (y_min|float + y_max|float ) / 2 %}
  
  # Set small pattern box around center point
  {% set x_center_min = x_center - (smallpatternsize/2) %}
  {% set x_center_max = x_center + (smallpatternsize/2) %}
  {% set y_center_min = y_center - (smallpatternsize/2) %}
  {% set y_center_max = y_center + (smallpatternsize/2) %}

  # Save current gcode state (absolute/relative, etc)
  SAVE_GCODE_STATE NAME=TEST_SPEED
  
  # Output parameters to g-code terminal
  { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
  
  # Home and get position for comparison later:
  G28 X
  G28 Y
  # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
  G90
  G1 Z50
  G0 X{x_max} Y{y_max} F{30*60}
  G4 P1000 
  GET_POSITION

  # Go to starting position
  G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

  # Set new limits
  SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

  {% for i in range(iterations) %}
    # Large pattern
    # Diagonals
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    
    # Box
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
      
    # Small pattern
    # Small diagonals 
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    
    # Small box
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
  {% endfor %}

  # Restore max speed/accel/accel_to_decel to their configured values
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

  # Re-home and get position again for comparison:
  G28 X
  G28 Y
  # Go to XY home positions (in case your homing override leaves it elsewhere)
  G90
  G0 X{x_max} Y{y_max} F{30*60}
  G4 P1000 
  GET_POSITION

  # Restore previous gcode state (absolute/relative, etc)
  RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  {% if params.EXTRUDER is defined %}
    TOOL_SERVICE T={params.EXTRUDER}
	SAVE_GCODE_STATE NAME=unload_state
	G91
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
      M117 Heating...
      # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
      M109 T{params.EXTRUDER} S{params.TEMP|default(220, true)}
	{% endif %}
	{% set unload_speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
	{% set unload_length = printer["gcode_macro RatOS"].filament_unload_length|float %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-{unload_length} F{unload_speed}
	M117 Filament unloaded!
	RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
	RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}


[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  {% if params.EXTRUDER is defined %}
    TOOL_SERVICE T={params.EXTRUDER}
    SAVE_GCODE_STATE NAME=load_state
	G91
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
      M117 Heating...
      M104 S{params.TEMP|default(220, true)}
      M109 T{params.EXTRUDER} S{params.TEMP|default(220, true)}
	{% endif %}
	{% set load_speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
	{% set load_length = printer["gcode_macro RatOS"].filament_load_length|float %}
	M117 Loading filament...
	# Load the filament into the hotend area.
	G0 E{load_length} F{load_speed}
	# Wait a secod
	G4 P1000
	# Purge
	G0 E40 F100
	# Wait for purge to complete
	M400
	M117 Filament loaded!
	RESPOND MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=load_state
  {% endif %}


[resonance_tester]
probe_points:
  315,130,50


[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genarates input shaper resonances graphs for analysis. Uses the AXIS parameter for if you only want to do one axis at a time, (eg. GENERATE_SHAPER_GRAPHS AXIS=X)
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set T = params.T|default(0) %}
  {% set freq_start = params.FREQUENCY_START|default(10)|int %}
  {% set freq_end = params.FREQUENCY_END|default(133)|int %}

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    KTCC_T{T}
    {% if params.AXIS is defined %}
      {% if params.AXIS|lower == 'x' %}
        TEST_RESONANCES AXIS=X FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
        RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
      {% elif params.AXIS|lower == 'y' %}
        TEST_RESONANCES AXIS=Y FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
        RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
      {% else %}
        {action_raise_error("Unknown axis specified. Expected X or Y.")}
      {% endif %}
    {% else %}
      TEST_RESONANCES AXIS=X FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      TEST_RESONANCES AXIS=Y FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
      RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
      RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
    {% endif %}
  {% endif %}


[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned.
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set T = params.T|default(0) %}
  {% set freq_start = params.FREQUENCY_START|default(10)|int %}
  {% set freq_end = params.FREQUENCY_END|default(133)|int %}

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    KTCC_T{T}
    {% if params.AXIS is defined %}
      {% if params.AXIS|lower == 'x' %}
        TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
        TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START=10 FREQ_END=11 CHIPS=t{T}
      {% elif params.AXIS|lower == 'y' %}
        TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START=10 FREQ_END=11 CHIPS=t{T}
        TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      {% else %}
        {action_raise_error("Unknown axis specified. Expected X or Y.")}
      {% endif %}
    {% else %}
      TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
      TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START={freq_start} FREQ_END={freq_end} CHIPS=t{T}
    {% endif %}
    RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
    RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"
  {% endif %}


[gcode_macro _PARK]
gcode:
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    {% set tool_detected = printer["filament_switch_sensor tool_detect"].filament_detected %}
    {% set safe_y = printer["gcode_macro Tool_Changer"].safe_zone_y_unloaded|float %}
    # {% set safe_y = printer["gcode_macro Tool_Changer"].safe_zone_y|float %}
    # {% if tool_detected == false %}
    #   {% set safe_y = printer["gcode_macro Tool_Changer"].safe_zone_y_unloaded|float %}
    # {% endif %}

	# Get X position
	{% if params.X != '' %}
		{% if params.X|float >= printer.toolhead.axis_minimum.x + 5 and params.X|float <= printer.toolhead.axis_maximum.x - 5 %}
			{% set safe_x = params.X|float %}
		{% else %}
			{action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults')}
			{% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
		{% endif %}
	{% else %}
		{% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	# Absolute positioning
	G90 
	# Park
	G0 X{safe_x} Y{safe_y} F{speed} 


[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
	SAVE_GCODE_STATE NAME=prime_blob_state
	M117 Priming nozzle with prime blob..
	RESPOND MSG="Priming nozzle with prime blob.."
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set fan_speed = printer["gcode_macro RatOS"].nozzle_prime_bridge_fan|float %}
	{% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
		{% set x_start = 5 %}
	{% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
		{% set x_start = printer.toolhead.axis_maximum.x - 5 %}
	{% else %}
		{% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
	{% endif %}
	{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
		{% set y_start = 5 %}
		{% set y_factor = 1 %}
	{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
		{% set y_start = printer.toolhead.axis_maximum.y - 5 %}
		{% set y_factor = -1 %}
	{% else %}
		{% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
			{% set y_factor = 1 %}
		{% else %}
			{% set y_factor = -1 %}
		{% endif %}
	{% endif %}
	{% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
		{% set y_factor = 1 %}
	{% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
		{% set y_factor = -1 %}
	{% endif %}
	# {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
	# Absolute positioning
	G90 
	# Relative extrusion
	M83
	# Lift to start print Z height
	# G0 Z{z} F{z_speed}
	# move close to blob position along the edge of the bed
	G1 X{x_start} F{speed}
	G1 Y{y_start - (15 * y_factor)} F{speed}
	# Lower to blob extrusion height
	G1 Z0.5 F{z_speed}
	# Move to final position horizontally
	G1 Y{y_start} F{speed}
	# Extrude a blob
	G1 F60 E20
	# 40% fan
	M106 S{fan_speed} 
	# Move the extruder up by 5mm while extruding, breaks away from blob
	G1 Z5 F100 E5  
	# Move to wipe position, but keep extruding so the wipe is attached to blob
	G1 F200 Y{y_start + (25 * y_factor)} E1 
	# Go down diagonally while extruding
	# Broken down in z moves under 2mm as a workaround for a tuning tower test.
	# The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
	G1 F200 Y{y_start + (30 * y_factor)} Z3.8 E0.5
	G1 F200 Y{y_start + (35 * y_factor)} Z2.6 E0.5
	G1 F200 Y{y_start + (40 * y_factor)} Z1.4 E0.5
	G1 F200 Y{y_start + (45 * y_factor)} Z0.2 E0.5
	# 0% fan
	M106 S0
	# small wipe line
	G1 F200 Y{y_start + (50 * y_factor)} Z0.2 E0.6 
	# Break away wipe
	G1 F{speed} Y{y_start + (100 * y_factor)}
	RESTORE_GCODE_STATE NAME=prime_blob_state