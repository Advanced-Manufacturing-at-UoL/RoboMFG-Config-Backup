#############################################################################################################
### Safety
### Macros and and config for control of the safety systems "READ ONLY" 
#############################################################################################################
[gcode_macro SAFETY_LIMITS]
variable_xy_velocity: 50
variable_xy_current: 0.4
gcode:
  ECHO_SAFETY_LIMIT_VARS


[gcode_button door_switches]
pin: ^!PG15
press_gcode:
  {action_respond_info("Doors closed")}
  _MOTOR_NORMAL_LIMITS
 
release_gcode:
  {action_respond_info("Doors opened")}
  {% if printer.idle_timeout.state == 'Printing' %}
    {action_emergency_stop("Doors opened while printing")}
  {% else %}
    _MOTOR_SAFE_LIMITS
  {% endif %}


[gcode_macro _CHECK_DOORS]
gcode:
  {% if printer["gcode_button door_switches"].state == 'RELEASED' %}
    {action_respond_info("Doors are open")}
    _MOTOR_SAFE_LIMITS
    {action_raise_error("Close doors before printing")}
  {% else %}
    {action_respond_info("Doors are closed")}
    _MOTOR_NORMAL_LIMITS
  {% endif %}


[gcode_macro _MOTOR_SAFE_LIMITS]
gcode:
  {% set xy_velocity = printer["gcode_macro SAFETY_LIMITS"].xy_velocity|float %}
  {% set xy_current = printer["gcode_macro SAFETY_LIMITS"].xy_current|float %}
  SET_VELOCITY_LIMIT VELOCITY={xy_velocity}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={xy_current} HOLDCURRENT={xy_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={xy_current} HOLDCURRENT={xy_current}


[gcode_macro _MOTOR_NORMAL_LIMITS]
gcode:
  {% set xy_velocity = printer.configfile.config.printer.max_velocity|float %}
  {% set xy_current = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
  SET_VELOCITY_LIMIT VELOCITY={xy_velocity}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={xy_current} HOLDCURRENT={xy_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={xy_current} HOLDCURRENT={xy_current}


[delayed_gcode CHECK_DOORS_ON_BOOT]
initial_duration: 2.0
gcode:
  _MOTOR_SAFE_LIMITS
  _CHECK_DOORS

#####
# START PRINT MACROS
# Call this from your slicer (custom g-code). 
#####

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  _CHECK_DOORS
  KTCC_INIT_PRINT_STATS
  CLEAR_PAUSE
  {% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
    G90
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Home if needed
  G28
  Z_TILT_ADJUST
  G28 Z
  SRB_HOME
  {% if params.CHAMBER_TEMP is defined %}
    _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp}
  {% endif %}
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  # M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1}
  # Preheat first tool
  {% set standby_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
  M568 P{params.INITIAL_EXTRUDER} R{standby_temp} S{params.EXTRUDER_TEMP} A1
  M117 Pre-Heating extruder...
  RESPOND MSG="Pre-Heating extruder..."
  # Run the customizable "PARK" macro
  # _START_PRINT_PARK
  # Mount and wait for extruder to heat up
  KTCC_T{params.INITIAL_EXTRUDER}
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  # RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0