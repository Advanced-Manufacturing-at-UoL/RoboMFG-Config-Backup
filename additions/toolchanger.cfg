
[display_status]

[save_variables]
filename:  ~/printer_data/variables.cfg

[duplicate_pin_override]
pins: PG12

[include sensors.cfg]
[include coupler.cfg]
[include tools.cfg]
[include pickup.cfg]
[include dropoff.cfg]
[include toolboard_pin-defs.cfg]

[gcode_macro ECHO_TOOL_CHANGER_VARS]
description: Echo tool changer variables to the console.
gcode:
  {% for var, value in printer["gcode_macro Tool_Changer"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}


[gcode_macro Tool_Changer]
description: Tool changer variable storage macro, will echo variables to the console when run.
variable_lock_speed: 60
variable_zone_speed: 18000
variable_park_in_speed: 6000
variable_park_out_speed: 6000
variable_pause_reason: 0
variable_safe_zone_y: 270
gcode:
  ECHO_TOOL_CHANGER_VARS

# [gcode_macro M106]
# description: Snnn Pnnn
#   Set fan speed. A tool and toollock must be configured for this to work.
#   S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
#   P: Tool (optional, defaults to the currently selected tool)
#   The P parameter specifies tool instead of fan number as in RRF.
# gcode:
#   {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

#   # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
#   {% if params.S is defined %}
#     {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
#   {% endif %}

#   # P= Tool number
#   {% if params.P is defined %}
#     {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
#   {% endif %}

#   SET_AND_SAVE_FAN_SPEED{newparameters}

# [gcode_macro M107]
# description: Pnnn
#   Turn off fan.
#   P = Tool (optional and defaults to the currently selected tool)
# gcode:       
#   {% if params.P is defined %}
#     {% set p = " P"~params.P %}
#   {% endif %}
#   M106 {p|default("")} S0
  

# [gcode_macro G10]
# description: See M568. Passtrough to M568.
# gcode:
#   M568 {rawparams}


# [gcode_macro M568]
# description: Pnnn Rnnn Snnn An Nnnn Mnnn
#   Set tool temperature.
#   P= Tool number, optional. If this parameter is not provided, the current tool is used.
#   R= Standby temperature(s), optional
#   S= Active temperature(s), optional
#   A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
#   N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
#       Use for example 0.1 to change immediately to standby temperature.
#   O = Time in seconds to wait from docking tool to shutting off the heater, optional.
#       Use for example 86400 to wait 24h if you want to disable shutdown timer.
# gcode:
#   #  RESPOND MSG="M568: Seting new temperature: {rawparams}"
#   {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

#   # P= Tool number
#   {% if params.P is defined %}
#     {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
#   {% endif %}

#   # R= Standby temperature
#   {% if params.R is defined %}
#     {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
#   {% endif %}

#   # S= Active temperature
#   {% if params.S is defined %}
#     {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
#   {% endif %}

#   # N = Time in seconds to wait from docking tool to putting the heater in standy
#   {% if params.N is defined %}
#     {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
#   {% endif %}

#   # M = Time in seconds to wait from docking tool to shuting off the heater
#   {% if params.O is defined %}
#     {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
#   {% endif %}

#   # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
#   {% if params.A is defined %}
#     {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
#   {% endif %}

#   {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
#   SET_TOOL_TEMPERATURE{newparameters}


# [gcode_macro M116]
# description: Pnnn Hnnn Snnn
#   Waits for all temperatures, or a specified tool or heater's temperature.
#   This command can be used without any additional parameters.
#   Without parameters it waits for bed and current extruder.
#   Only one of either P or H may be used.
#   Pnnn Tool number.
#   Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
#   Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.
# gcode:
#   {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.
#   {% if params.P is defined %}
#     {% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
#   {% endif %}
#   {% if params.H is defined %}
#     {% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
#   {% endif %}
#   {% if params.S is defined %}
#     {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
#   {% endif %}
#   TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}


# [gcode_macro G28]
# rename_existing: G990028
# variable_do_x: 0
# variable_do_y: 0
# variable_do_z: 0
# gcode:
#   { action_respond_info("G28 running: "~rawparams) }

#   {% set do_x = 0 %}
#   {% set do_y = 0 %}
#   {% set do_z = 0 %}

#   {% if params.Y is defined %}
#     ## for y home just y
#     {% set do_y = 1 %} 
#   {% endif %}

#   {% if params.X is defined %}
#     ## for x home y first then X
#     {% set do_x = 1 %} 
#   {% endif %}

#   {% if params.Z is defined %}
#     ## for z home just z
#     {% set do_z = 1 %} 
#   {% endif %}

#   {% if do_y == 1 %}
#     RESPOND PREFIX="info" MSG="Home > Todo: Y"
#   {% endif %}
#   {% if do_x == 1 %}
#     RESPOND PREFIX="info" MSG="Home > Todo: X"
#   {% endif %}
#   {% if do_z == 1 %}
#     RESPOND PREFIX="info" MSG="Home > Todo: Z"
#   {% endif %}

#   {% if do_x == 0 and do_y == 0 and do_z == 0 %}
#     {% set do_x = 1 %} 
#     {% set do_y = 1 %} 
#     {% set do_z = 1 %} 
#     RESPOND PREFIX="info" MSG="Home > Doing all XYZ"
#   {% endif %}

#   {% if do_x == 1 %}
#     RESPOND PREFIX="info" MSG="Homing > X"
#     G90
#     G990028 X0
#     G91
#     G0 X5 F2000
#     G90
#   {% endif %}

#   {% if do_y == 1 %}
#     RESPOND PREFIX="info" MSG="Home > Y"
#     G90
#     G990028 Y0
#     G91
#     G0 Y5 F2000
#     G90
#   {% endif %}

#   {% if do_z == 1 %}
#     RESPOND PREFIX="info" MSG="Homing > Z"
#     HOME_Z
#   {% endif %}

#   RESPOND PREFIX="info" MSG="Homing > Done"


[gcode_macro HOME_Z]
gcode:
  # To home Z, we first must home X and Y.
  {% if 'x' not in printer.toolhead.homed_axes %}
    G28 X
  {% endif %}

  {% if 'y' not in printer.toolhead.homed_axes %}
    G28 Y
  {% endif %}

  TOOL_DROPOFF

  RESPOND PREFIX="info" MSG="Homing > Z"
  SET_GCODE_OFFSET X=0 Y=0
  SET_KINEMATIC_POSITION Z=0
  
  G90
  G0 X150 Y150 F6000
  G990028 Z0
  G0 Z10


[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  CLEAR_PAUSE
  # SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Home if needed
  MAYBE_HOME
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH
  # SUGGEST: RESTORE_GCODE_STATE NAME=start_print_state

  TOOL_SELECT T={params.INITIAL_TOOL|default(0)}

  G90
  # Start heating extruder
  #M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "PARK" macro
  #_START_PRINT_PARK
  # Wait for extruder to heat up
  #M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  #_START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  # ORIGINAL: RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  M83
  G92 E0

[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
  _END_PRINT_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS
  G10 P0 S0 R0 A0	; turn off extruder 0
  G10 P1 S0 R0 A0	; turn off extruder 1
  G10 P2 S0 R0 A0	; turn off extruder 2
  G10 P3 S0 R0 A0	; turn off extruder 3
  # Part cooling fan off
  M107

  _END_PRINT_AFTER_HEATERS_OFF
  TOOL_DROPOFF
  M400

  _END_PRINT_PARK

  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  # Steppers off
  M84

  SET_GCODE_VARIABLE MACRO=Tool_Changer VARIABLE=pause_reason VALUE=0
  
  M117 Done :)
  RESPOND MSG="Done :)"
  RESTORE_GCODE_STATE NAME=end_print_state
  SET_GCODE_OFFSET X=0 Y=0

[gcode_macro PAUSE_TOOL]
description: Pauses the printer due to a tool change issue
gcode:
  M117 "PAUSED"
  SAVE_GCODE_STATE NAME=PAUSE_state
  PAUSE_BASE

[gcode_macro PAUSE]
description: Pauses the printer and parks front with tool
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
  #TODO: save current offsets or tool then undock
  M400
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  SET_GCODE_OFFSET X=0 Y=0
  #G28 X Y
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    #_PARK LOCATION={printer["gcode_macro RatOS"].pause_print_park_in} X={printer["gcode_macro RatOS"].pause_print_park_x}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
  {% set pause_reason = printer["gcode_macro Tool_Changer"].pause_reason|int %}
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}

  {% if pause_reason == 0 %}
    # Prime
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
      G90
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
  {% else %}
    SET_GCODE_VARIABLE MACRO=Tool_Changer VARIABLE=pause_reason VALUE=0
  {% endif %}
  M117 "RESUMING"
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE

[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  #SDCARD_RESET_FILE
  CANCEL_PRINT_BASE

[gcode_macro GET_GLOBAL_OFFSET]
description: Get the current global offset
gcode:
  {%set toollock = printer['toollock']%}

  RESPOND MSG="Global Offset: X={toollock.global_offset[0]} Y={toollock.global_offset[1]} Z={toollock.global_offset[2]}"

[gcode_macro GET_TOOL_OFFSET]
description: Get the current offset for a tool
  Tn: Tool index
gcode:
  {%set tool = printer['tool '~params.T]%}

  RESPOND MSG="Tool {params.T} Offset: X={tool.offset[0]} Y={tool.offset[1]} Z={tool.offset[2]}"

[gcode_macro SAVE_ACCELERATION]
variable_max_accel: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_ACCELERATION VARIABLE=max_accel VALUE={printer.toolhead.max_accel}

[gcode_macro RESTORE_ACCELERATION]
gcode:
  {% if printer['gcode_macro SAVE_ACCELERATION'].max_accel|int == 0 %}
    { action_respond_info("RESTORE_ACCELERATION: No acceleration saved.") }
  {% else %}
    M204 S{printer['gcode_macro SAVE_ACCELERATION'].max_accel}
  {% endif %}

