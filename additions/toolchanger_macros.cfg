#############################################################################################################
### Toolchanger Macros
### Add any macros relating to toolchanger opperations here
#############################################################################################################

[gcode_macro TOOL_PICKUP]
description: Pickup tool
gcode:

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    KTCC_T{params.T}
  {% else %}
    {action_respond_info("Must enter tool number")}
  {% endif %}


[gcode_macro TOOL_DROPOFF]
description: Dropoff current tool
gcode:
  KTCC_TOOL_DROPOFF_ALL


[gcode_macro COUPLER_UNLOCK]
description: Unlock toolhead
gcode:
  TOOL_UNLOCK

[gcode_macro COUPLER_LOCK]
description: Lock toolhead
gcode:
  TOOL_LOCK

[gcode_macro TOOL_SERVICE]
description: Bring selected tool to the front and lower the bed for servicing
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set service_z_speed = printer.configfile.config.printer.max_z_velocity|float * 60 %}
  {% set chosen_tool = params.T|int %}
  {% set DROP_BED = params.DROP_BED|default(False) %}

  {% if params.T is defined %}
    {% if x_homed is false or y_homed is false or z_homed is false %}
      G28
    {% endif %}
    {% set current_tool = printer.toollock.tool_current|int %}
    KTCC_T{params.T}
    {% set myself = printer['tool '~params.T] %}
    {% set service_x = (printer.configfile.config.stepper_x.position_max|float / 2) - myself.offset[0]|int  %}
    {% set service_y = 10 - myself.offset[1]|int %}
    {% set service_z = printer.toolhead.axis_maximum.z - myself.offset[2]|int %}
    M400
    G90
    G1 X{service_x} Y{service_y} F{speed}
    {% if DROP_BED|lower == 'true' %}
      G1 Z{service_z} F{service_z_speed}
    {% endif %}
  {% else %}
    {action_respond_info("Tool must be defined")}
  {% endif %}


[gcode_macro TOOL_SERVICE_END]
description: Drop off tool and return print bed to a raised height
gcode:
  {% set x_homed = 'x' in printer.toolhead.homed_axes %}
  {% set y_homed = 'y' in printer.toolhead.homed_axes %}
  {% set z_homed = 'z' in printer.toolhead.homed_axes %}
  {% set current_tool = printer.toollock.tool_current|int %}
  {% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
  {% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
  {% set service_z_speed = printer.configfile.config.printer.max_z_velocity|float * 60 %}

  {% if x_homed is false or y_homed is false or z_homed is false %}
    G28
  {% endif %}
  {% if current_tool >= 0 %}
    KTCC_TOOL_DROPOFF_ALL
  {% endif %}
  M400
  G90
  G1 Z{z_hop} F{service_z_speed}
  G1 X{safe_home_x} Y{safe_home_y} F{speed}


[gcode_macro TOOL_SHUTDOWN_ALL]
description: Turn off all tools heaters
gcode:
  M568 P0 R0 S0 A0
  M568 P1 R0 S0 A0

[gcode_macro M106]
variable_fan_speed: 0
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  SET_AND_SAVE_FAN_SPEED{newparameters}

[gcode_macro M107]
description: Pnnn
  Turn off fan.
  P = Tool (optional and defaults to the currently selected tool)
gcode:       
  {% if params.P is defined %}
    {% set p = " P"~params.P %}
  {% endif %}
  M106 {p|default("")} S0


[gcode_macro G10]
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}


[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
      Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
      Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}


[gcode_macro M116]
description: Pnnn Hnnn Snnn
  Waits for all temperatures, or a specified tool or heater temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Only one of either P or H may be used.

  Pnnn Tool number.
  Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
  Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.

gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.


  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
  {% endif %}

  {% if params.H is defined %}
    {% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
  {% endif %}

  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
  {% endif %}

  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}


[gcode_macro SAVE_ACCELERATION]
variable_max_accel: 0
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_ACCELERATION VARIABLE=max_accel VALUE={printer.toolhead.max_accel}


[gcode_macro RESTORE_ACCELERATION]
gcode:
  {% if printer['gcode_macro SAVE_ACCELERATION'].max_accel|int == 0 %}
    { action_respond_info("RESTORE_ACCELERATION: No acceleration saved.") }
  {% else %}
    M204 S{printer['gcode_macro SAVE_ACCELERATION'].max_accel}
  {% endif %}


[gcode_macro ECHO_TOOL_CHANGER_VARS]
description: Echo tool changer variables to the console.
gcode:
  {% for var, value in printer["gcode_macro Tool_Changer"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}


#####
# START PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  KTCC_INIT_PRINT_STATS
  CLEAR_PAUSE
  {% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
    G90
  {% endif %}
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Home if needed
  G28
  Z_TILT_ADJUST
  G28 Z
  {% if params.CHAMBER_TEMP is defined %}
    _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp}
  {% endif %}
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  # M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1}
  # Preheat first tool
  {% set standby_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
  M568 P{params.INITIAL_EXTRUDER} R{standby_temp} S{params.EXTRUDER_TEMP} A1
  M117 Pre-Heating extruder...
  RESPOND MSG="Pre-Heating extruder..."
  # Run the customizable "PARK" macro
  # _START_PRINT_PARK
  # Mount and wait for extruder to heat up
  KTCC_T{params.INITIAL_EXTRUDER}
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  # RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0


#####
# END PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
  _END_PRINT_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS
  _END_PRINT_AFTER_HEATERS_OFF
  _END_PRINT_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
      SET_SKEW CLEAR=1
  {% endif %}
  # Steppers off
  M84
  # Part cooling fan off
  M107
  # Clear bed mesh so that G28 doesn't fail.
  BED_MESH_CLEAR
  M117 Done :)
  RESPOND MSG="Done :)"
  RESTORE_GCODE_STATE NAME=end_print_state

#####
# END PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _END_PRINT_AFTER_HEATERS_OFF]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
  {% if act_z < (max_z - z_hop) %}
          {% set z_safe = z_hop %}
  {% else %}
          {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z{z_safe} F3600
  # Retract filament even more
  G1 E-2 F3600
  # Back to absolute positioning
  G90

  G10 P0 S0 R0 A0	; turn off extruder 0
  G10 P1 S0 R0 A0	; turn off extruder 1
  KTCC_TOOL_DROPOFF_ALL		; dropoff current tool
  SAVE_POSITION         ; Reset saved position.
  KTCC_DUMP_PRINT_STATS ; Print statistics to console.


[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_RATOS
gcode:
  END_PRINT
  CLEAR_PAUSE
  CANCEL_PRINT_BASE

#####
# SuperSlicer Tx compatibility
# SuperSlicer uses Tx whereas the toolchanger module uses KTCC_Tx, this ensures compatibility.
####

[gcode_macro T0]
gcode:
  KTCC_T0


[gcode_macro T1]
gcode:
  KTCC_T1

